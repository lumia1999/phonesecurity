<?xml version="1.0" ?>
<project name="CRM" default="dist" basedir=".">
    <!-- ************************************************************************************* -->
    <!-- These settings were written by activitycreator.
         Do not change them unless you really know what you are doing. -->

    <!-- Application Package Name -->
    <property name="application-package" value="com" />
    
    <!-- ************************************************************************************* -->
    <!-- No user servicable parts below. -->
	
	<!-- Tiger. Please copy ant-contrib-XXX.jar of this directory into "lib" directory of ant-->
	<taskdef resource="net/sf/antcontrib/antlib.xml" />
	
	<propertyregex property="logo" input="${market-channel}" regexp="(.*)/" select="\1" />
	<echo>gen logo for ${logo}</echo>
	<propertyregex property="channel" input="${market-channel}" regexp="/(.*)" select="\1" />
	<echo>gen channel for ${channel}</echo>
	
    <property name="android-tools" value="${sdk-folder}/tools" />
	<property name="android-platform-tools" value="${sdk-folder}/platform-tools"/>
    <property name="android-framework" value="${android-tools}/lib/framework.aidl" />

    <!-- Input directories -->
    <property name="resource-dir" value="res" />
    <property name="asset-dir" value="assets" />
    <condition property="srcdir-ospath"
            value="${basedir}\${srcdir}"
            else="${basedir}/${srcdir}" >
        <os family="windows"/>
    </condition>

    <!-- folder for the 3rd party java libraries -->
    <property name="external-libs" value="libs" />
    <condition property="external-libs-ospath"
            value="${basedir}\${external-libs}"
            else="${basedir}/${external-libs}" >
        <os family="windows"/>
    </condition>

    <!-- folder for the native libraries -->
    <property name="native-libs" value="lib" />
    <condition property="native-libs-ospath"
            value="${basedir}\${native-libs}"
            else="${basedir}/${native-libs}" >
        <os family="windows"/>
    </condition>

    <!-- Create R.java in the source directory -->
 

    <!-- Intermediate files -->
    <property name="dex-file" value="classes.dex" />
    <property name="intermediate-dex" value="${outdir}/${dex-file}" />
    <condition property="intermediate-dex-ospath"
            value="${basedir}\${intermediate-dex}"
            else="${basedir}/${intermediate-dex}" >
        <os family="windows"/>
    </condition>

    <!-- The final package file to generate -->
    <property name="resources-package" value="${outdir}/${ant.project.name}.ap_" />
    <condition property="resources-package-ospath"
            value="${basedir}\${resources-package}"
            else="${basedir}/${resources-package}" >
        <os family="windows"/>
    </condition>

    <property name="out-debug-package" value="${outdir}/${ant.project.name}-debug.apk" />
    <condition property="out-debug-package-ospath"
            value="${basedir}\${out-debug-package}"
            else="${basedir}/${out-debug-package}" >
        <os family="windows"/>
    </condition>

    <property name="out-unsigned-package" value="${outdir}/${ant.project.name}-${channel}-unsigned-${deployment.number}.apk"/>
    <condition property="out-unsigned-package-ospath"
            value="${basedir}\${out-unsigned-package}"
            else="${basedir}/${out-unsigned-package}" >
        <os family="windows"/>
    </condition>
    
    <property name="out-package" value="${outdir}/${ant.project.name}-${channel}-${deployment.number}.apk" />
    <condition property="out-package-ospath"
            value="${basedir}\${out-package}"
            else="${basedir}/${out-package}" >
        <os family="windows"/>
    </condition>
    
    <!-- Tools -->
    <condition property="aapt" value="${android-platform-tools}/aapt.exe" else="${android-platform-tools}/aapt" >
        <os family="windows"/>
    </condition>
    <condition property="aidl" value="${android-platform-tools}/aidl.exe" else="${android-platform-tools}/aidl" >
        <os family="windows"/>
    </condition>
    <condition property="adb" value="${android-platform-tools}/adb.exe" else="${android-platform-tools}/adb" >
        <os family="windows"/>
    </condition>
    <condition property="dx" value="${android-platform-tools}/dx.bat" else="${android-platform-tools}/dx" >
        <os family="windows"/>
    </condition>
    <condition property="apk-builder" value="${android-tools}/apkbuilder.bat" else="${android-tools}/apkbuilder" >
        <os family="windows"/>
    </condition>

    <property name="android-jar" value="${sdk-folder}/android.jar" />
	<!--	<property name="internal-jar" value="${sdk-folder}/internal.jar" />-->
   <!-- <property name="oms-jar" value="${sdk-folder}/oms.jar" />-->
	
	<!-- copy channel id into manifest.xml-->
	<target name="channel-id">
		<echo>market channel:${channel},logo:${logo},logodir:${logodir},resdir=${resdir}</echo>
		<replaceregexp byline='false' flags='g' file='AndroidManifest.xml' match='android:name="channelId" android:value="(.*)"' replace='android:name="channelId" android:value="${channel}"' />
		<delete file="${resdir}/drawable-hdpi/ic_launcher.png"/>
		<copy file="${logodir}/${logo}/ic_launcher.png" todir="${resdir}/drawable-hdpi" />
	</target>
	
	<!-- Generate the R.java file for this project's resources. -->
    <target name="resource-src" depends="channel-id">
        <echo>Generating R.java / Manifest.java from the resources...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-m" />
            <arg value="-J" />
            <arg value="${outdir-r}" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <arg value="-I" />
            <arg value="${android-jar}" />
        </exec>
    </target>

    <!-- Generate java classes from .aidl files. -->
    <target name="aidl" depends="channel-id">
        <echo>Compiling aidl files into Java classes...</echo>
        <apply executable="${aidl}" failonerror="true">
            <arg value="-p${android-framework}" />
            <arg value="-I${srcdir}" />
        	<arg value="-o${outdir-r}" />
        	<fileset dir="${srcdir}">
                <include name="**/*.aidl"/>
            </fileset>
        </apply>
    </target>

    <!-- Compile this project's .java files into .class files. -->
    <target name="compile" depends="channel-id, resource-src, aidl">
        <javac encoding="utf-8" target="1.6" debug="true" extdirs=""
                srcdir="."
                destdir="${outdir-classes}"
            bootclasspath="${oms-jar}:${internal-jar}:${android-jar}">
            <classpath>
                <fileset dir="${external-libs}" includes="*.jar"/>
            </classpath>
        <!-- <classpath>
                 <fileset dir="${native-libs}" includes="*.jar"/>
             </classpath> -->
         </javac>
    </target>

	
	<taskdef resource="proguard/ant/task.properties" classpath="${proguard.home}/proguard.jar" />
		<!-- Define a place for the optimized classes. -->
	<property name="out.proguard.absolute.jar"
	              location="${outdir}/classes-processed.jar" />

	<!-- Define a obfuscation mapping file. -->
	<property name="out.proguard.absolute.map"
			  location="${outdir}/classes-processed.map" />
	<target name="optimize" depends="compile">
	    <echo>Optimizing compiled files and libraries into ${out.proguard.absolute.jar}...</echo>
	    <proguard printmapping="${out.proguard.absolute.map}">
	            <injar      path="${outdir-classes-ospath}"   />
	            <outjar     path="${out.proguard.absolute.jar}"  />
	        	<libraryjar path="${android-jar}" />
	        	<libraryjar path="${external-libs}" />
				
	            -dontpreverify
	            -repackageclasses 'com.doo360.crm'
	            -allowaccessmodification
	            -optimizations !code/simplification/arithmetic
				
				-dontnote *.** 

	            <!--
	            -renamesourcefileattribute SourceFile
	            -keepattributes SourceFile,LineNumberTable
	            -->

	            -keepattributes *Annotation*

	            -keep public class * extends android.app.Activity
				-keep public class * extends android.support.v4.app.Fragment
	            -keep public class * extends android.app.Application
	            -keep public class * extends android.app.Service
	            -keep public class * extends android.content.BroadcastReceiver
	            -keep public class * extends android.content.ContentProvider

	            -keep public class * extends android.view.View {
	                public &lt;init&gt;(android.content.Context);
	                public &lt;init&gt;(android.content.Context, android.util.AttributeSet);
	                public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);
	                public void set*(...);
	            }

	            -keepclasseswithmembers class * {
	                public &lt;init&gt;(android.content.Context, android.util.AttributeSet);
	            }

	            -keepclasseswithmembers class * {
	                public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);
	            }

	            -keepclassmembers class * implements android.os.Parcelable {
	                static android.os.Parcelable$Creator CREATOR;
	            }

	            -keepclassmembers class **.R$* {
	                public static &lt;fields&gt;;
	            }

	            -keep public interface com.android.vending.licensing.ILicensingService
	            -dontnote com.android.vending.licensing.ILicensingService

	            -keepclasseswithmembernames class * {
	                native &lt;methods&gt;;
	            }

	            -keepclassmembers class * extends java.lang.Enum {
	                public static **[] values();
	                public static ** valueOf(java.lang.String);
	            }
	            #-keep public interface oms.mspaces.services.ISyncService
	            #-dontnote oms.mspaces.services.ISyncService
	            #-keep public interface oms.mspaces.services.ISyncServiceCallback
	            #-dontnote oms.mspaces.services.ISyncServiceCallback
	        	
	        	-keep class org.**
	        	            -dontnote org.**
	        	            -keepclassmembers class org.** {
	        	        	*;
	        	        	}
	        	            -keep class com.google.**
	        	            -dontnot com.google.**
	        	            -keepclassmembers class com.google.** {
	        	        	*;
	        	        	}
	        	
	        	-keep public class com.doo360.crm.R$*{
	        		public static final int exchange_*; }
					
	    </proguard>
	</target>
	
    <!-- Convert this project's .class files into .dex files. -->
    <target name="dex" depends="optimize">
        <echo>Converting compiled files and external libraries into ${outdir}/${dex-file}...</echo>
        <apply executable="${dx}" failonerror="true" parallel="true">
            <arg value="--dex" />
            <arg value="--output=${intermediate-dex-ospath}" />
            <arg path="${out.proguard.absolute.jar}" />
            <fileset dir="${external-libs}" includes="*.jar"/>
            <!-- <fileset dir="${native-libs}" includes="*.jar"/> -->
        </apply>
    </target>

    <!-- Put the project's resources into the output package file. -->
    <target name="package-res-and-assets">
        <echo>Packaging resources and assets...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <arg value="-A" />
            <arg value="${asset-dir}" />
            <arg value="-I" />
            <arg value="${android-jar}" />
            <arg value="-F" />
            <arg value="${resources-package}" />
        </exec>
    </target>

    <!-- Same as package-res-and-assets, but without "-A ${asset-dir}" -->
    <target name="package-res-no-assets">
        <echo>Packaging resources...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <!-- No assets directory -->
            <arg value="-I" />
            <arg value="${internal-jar}" />
            <arg value="-I" />
            <arg value="${oms-jar}" />
            <arg value="-I" />
            <arg value="${android-jar}" />
            <arg value="-F" />
            <arg value="${resources-package}" />
        </exec>
    </target>

    <!-- Invoke the proper target depending on whether or not
         an assets directory is present. -->
    <!-- TODO: find a nicer way to include the "-A ${asset-dir}" argument
         only when the assets dir exists. -->
    <target name="package-res">
        <available file="${asset-dir}" type="dir"
                property="res-target" value="and-assets" />
        <property name="res-target" value="no-assets" />
        <antcall target="package-res-${res-target}" />
    </target>

    <!-- Package the application and sign it with a debug key.
         This is the default target when building. It is used for debug. -->
    <target name="debug" depends="dex, package-res">
        <echo>Packaging ${out-debug-package}, and signing it with a debug key...</echo>
        <exec executable="${apk-builder}" failonerror="true">
            <arg value="${out-debug-package-ospath}" />
            <arg value="-z" />
            <arg value="${resources-package-ospath}" />
            <arg value="-f" />
            <arg value="${intermediate-dex-ospath}" />
            <arg value="-rf" />
            <arg value="${srcdir-ospath}" />
            <arg value="-rj" />
            <arg value="${external-libs-ospath}" />
            <!--arg value="-nf" />
            <arg value="${native-libs-ospath}" /-->
        </exec>
    </target>

    <!-- Package the application without signing it.
         This allows for the application to be signed later with an official publishing key. -->
    <target name="release" depends="dex, channel-id, package-res">
        <echo>Packaging ${out-unsigned-package} for release...</echo>
        <exec executable="${apk-builder}" failonerror="true">
            <arg value="${out-unsigned-package-ospath}" />
            <arg value="-u" />
            <arg value="-z" />
            <arg value="${resources-package-ospath}" />
            <arg value="-f" />
            <arg value="${intermediate-dex-ospath}" />
            <arg value="-rf" />
            <arg value="${srcdir-ospath}" />
            <arg value="-rj" />
            <arg value="${external-libs-ospath}" />
            <arg value="-nf" />
            <arg value="${native-libs-ospath}" />
        </exec>
        <echo>It will need to be signed with jarsigner before being published.</echo>
    </target>
    
    <target name="sign" depends="release">
    	<echo>Signing ${out-unsigned-package} ...</echo>
    	<signjar alias="${key.alias}" keystore="${key.store}" 
    	    storepass="herry123" 
    	    jar="${out-unsigned-package}" 
    	    signedjar="${out-package}" />
    </target>
    
    <target name="dist" depends="sign">
    	<mkdir dir="${dist}"/>
    	<move file="${outdir}/${ant.project.name}-${channel}-${deployment.number}.apk" todir="${dist}"/>
    	<move file="${outdir}/${ant.project.name}-${channel}-unsigned-${deployment.number}.apk" todir="${dist}"/>
    </target>
	
	<!-- Install the package on the default emulator -->
    <target name="installsigned" depends="sign">
        <echo>Installing ${out-package} onto default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="install" />
            <arg value="${out-package}" />
        </exec>
    </target>
    
    <!-- Install the package on the default emulator -->
    <target name="install" depends="debug">
        <echo>Installing ${out-debug-package} onto default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="install" />
            <arg value="${out-debug-package}" />
        </exec>
    </target>

    <target name="reinstall" depends="debug">
        <echo>Installing ${out-debug-package} onto default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="install" />
            <arg value="-r" />
            <arg value="${out-debug-package}" />
        </exec>
    </target>

    <!-- Uinstall the package from the default emulator -->
    <target name="uninstall">
        <echo>Uninstalling ${application-package} from the default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="uninstall" />
            <arg value="${application-package}" />
        </exec>
    </target>
</project>